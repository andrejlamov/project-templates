Given a project template with variables in paths and content

#+BEGIN_SRC bash :results output :exports both
tree test-project
#+END_SRC

#+RESULTS:
: test-project
: └── %NAME1%
:     └── %NAME2%
:         └── %NAME2%-hello.txt
: 
: 2 directories, 1 file

#+BEGIN_SRC bash :results output :exports both
cat test-project/%NAME1%/%NAME2%/%NAME2%-hello.txt
#+END_SRC

#+RESULTS:
: Test project
: 
: %NAME1%.%NAME2%
: 
: %GREET%
: 
: How are you?
: 
Now run ~template.sh~ with variables and a template folder:

#+BEGIN_SRC bash :results output :exports both
mkdir -p hello
cd hello
NAME1=src NAME2=andrej/lamov GREET='hello world' ../template.sh ../test-project
#+END_SRC

It outputs some info...
#+RESULTS:
#+begin_example
Source template:
  /home/andrej/code/template/test-project
Target:
  /home/andrej/code/template/hello
Variables:
  GREET=hello world
  NAME1=src
  NAME2=andrej/lamov
Using sed:
   -e 's\%GREET%\hello world\g' -e 's\%NAME1%\src\g' -e 's\%NAME2%\andrej/lamov\g'
Copying:
  %NAME1%/%NAME2%/%NAME2%-hello.txt -> src/andrej/lamov/andrej/lamov-hello.txt
#+end_example

And it results in the following structure
#+BEGIN_SRC bash :results output :exports both
tree hello
#+END_SRC

#+RESULTS:
: hello
: └── src
:     └── andrej
:         └── lamov
:             └── andrej
:                 └── lamov-hello.txt
: 
: 4 directories, 1 file


#+BEGIN_SRC bash :results output :exports both
cat hello/src/andrej/lamov/andrej/lamov-hello.txt
#+END_SRC

#+RESULTS:
: Test project
: 
: src.andrej/lamov
: 
: hello world
: 
: How are you?
: 
